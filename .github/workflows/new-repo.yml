name: Create new repo

on:
  issue_comment:
    types: [created]

jobs:
  create-repo:
    name: Create new repo
    runs-on: ubuntu-latest
    if: startsWith(github.event.comment.body, '/create-repo') &&
      contains(github.event.issue.labels.*.name, 'new-repo')

    steps:
      - name: Check out scripts
        uses: actions/checkout@v3

      - name: Dump GitHub context
        id: github_context_step
        run: echo '${{ toJSON(github) }}'
        
      - name: Parse issue body
        id: parse-issue-body
        uses: actions/github-script@v5
        with:
          script: |
            require('./.github/scripts/parse-issue-body.js')({context, core})

      - run: echo ${{ steps.parse-issue-body.outputs.repo-name }}

      - name: Create Repo
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            let newRepo = '${{ steps.parse-issue-body.outputs.repo-name }}'
            let templateRepo = ${{ steps.parse-issue-body.outputs.template-repository }}
            let teams = ${{ steps.parse-issue-body.outputs.team-permissions }}
            let enableIssue = ${{ steps.parse-issue-body.outputs.enable-issues }}
            let enableProject = ${{ steps.parse-issue-body.outputs.enable-projects }}
            let enableSquashMerge = ${{ steps.parse-issue-body.outputs.allow-squash-merge }}
            let enableForking = ${{ steps.parse-issue-body.outputs.allow-forking }}
            
            console.log("New repo: " + newRepo + " Template Repo: " + templateRepo + " Teams: " + teams)
            
            try {
              await github.rest.repos.createUsingTemplate({
                template_owner: '${{ github.REPOSITORY_OWNER }}',
                template_repo: templateRepo,
                name: newRepo,
                owner: '${{ github.REPOSITORY_OWNER }}',
                description: "Test",
                include_all_branches: true,
                private: false
              })
            } catch(err) {
                throw err 
            }
            
            try {
              await github.rest.repos.update({
                owner: '${{ github.REPOSITORY_OWNER }}',
                private: true,
                repo: newRepo,
                has_issues: enableIssue,
                has_projects: enableProject,
                allow_squash_merge: enableSquashMerge
              })
            } catch(err) {
                throw err 
            }
            
            try {
              await github.rest.repos.updateBranchProtection({
                "owner": '${{ github.REPOSITORY_OWNER }}',
                "repo": newRepo,
                "branch": 'main',
                "required_status_checks": { "strict": true, "contexts": [] },
                "enforce_admins": true,
                "required_pull_request_reviews": {"dismissal_restrictions": {"users":[], "teams":[]}, "dismiss_stale_reviews": false, "require_code_owner_reviews": true, "required_approving_review_count": 1},
                "restrictions" : { "users": [], "teams": [], "apps": [] }
              })
            } catch(err) {
                throw err 
            }
            
            try {
              await github.rest.teams.addOrUpdateRepoPermissionsInOrg({
                org: '${{ github.REPOSITORY_OWNER }}',
                owner: '${{ github.REPOSITORY_OWNER }}',
                repo: newRepo,
                team_slug: teams,
                permission: 'admin'
              })
            } catch(err) {
                throw err 
            }
            
            try { 
              await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: '${{ github.REPOSITORY_OWNER }}',
              repo: '${{ github.event.repository.name }}',
              body: 'Thanks for creating a repo. Your new repo is available at: https://github.com/' + context.payload.organization.login + "/" + newRepo
             }) 
            } catch(err) {
                throw err
            }
